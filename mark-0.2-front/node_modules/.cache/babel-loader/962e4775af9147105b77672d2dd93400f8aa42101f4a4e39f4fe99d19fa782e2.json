{"ast":null,"code":"var _jsxFileName = \"/Users/lesedimalapile/Downloads/mark-0.2/mark-0.2-front/src/pages/BreakEst.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BreakEst() {\n  _s();\n  const [password, setPassword] = useState(\"\");\n  const [estimation, setEstimation] = useState(\"Enter a password to see the estimate.\");\n\n  // This effect recalculates the time whenever the password changes\n  useEffect(() => {\n    if (password.length === 0) {\n      setEstimation(\"Enter a password to see the estimate.\");\n      return;\n    }\n    calculateTime(password);\n  }, [password]);\n\n  // Function to calculate the estimated time to crack\n  const calculateTime = pass => {\n    const length = pass.length;\n    let characterPool = 0;\n\n    // Determine the size of the character pool based on used characters\n    if (/[a-z]/.test(pass)) characterPool += 26;\n    if (/[A-Z]/.test(pass)) characterPool += 26;\n    if (/[0-9]/.test(pass)) characterPool += 10;\n    if (/[^A-Za-z0-9]/.test(pass)) characterPool += 32; // Common symbols\n\n    // Formula: (characterPool ^ length) / guessesPerSecond\n    const combinations = Math.pow(characterPool, length);\n    const guessesPerSecond = 10e9; // 10 billion guesses per second (a powerful cracking rig)\n    const seconds = combinations / guessesPerSecond;\n    setEstimation(formatTime(seconds));\n  };\n\n  // Helper function to format seconds into a readable string\n  const formatTime = seconds => {\n    if (seconds < 1) return \"Instantly\";\n    if (seconds < 60) return `${Math.round(seconds)} seconds`;\n    if (seconds < 3600) return `${Math.round(seconds / 60)} minutes`;\n    if (seconds < 86400) return `${Math.round(seconds / 3600)} hours`;\n    if (seconds < 31536000) return `${Math.round(seconds / 86400)} days`;\n    if (seconds < 3153600000) return `${Math.round(seconds / 31536000)} years`;\n    if (seconds < 31536000000) return `${Math.round(seconds / 3153600000)} centuries`;\n    return \"Eternity\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 24,\n      fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\",\n      maxWidth: 600,\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        marginTop: 0\n      },\n      children: \"Break-Time Estimator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"#6b7280\"\n      },\n      children: \"See how long it would theoretically take a powerful computer to crack your password.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      placeholder: \"Type a password to analyze\",\n      style: {\n        width: \"100%\",\n        boxSizing: \"border-box\",\n        padding: \"12px\",\n        border: \"1px solid #e5e7eb\",\n        borderRadius: 6,\n        fontSize: 16,\n        marginBottom: 24\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        border: \"1px solid #e5e7eb\",\n        borderRadius: 8,\n        padding: \"32px 20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          color: \"#6b7280\",\n          fontSize: 14,\n          textTransform: \"uppercase\"\n        },\n        children: \"Estimated Time to Crack\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: \"8px 0 0\",\n          color: \"#111827\",\n          fontSize: \"2.5rem\",\n          fontWeight: 700\n        },\n        children: estimation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      style: {\n        color: \"#2563eb\",\n        display: \"inline-block\",\n        marginTop: 24\n      },\n      children: \"\\u2190 Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(BreakEst, \"948Cxf9sYgpVT1OelVmMtk366sM=\");\n_c = BreakEst;\nvar _c;\n$RefreshReg$(_c, \"BreakEst\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","BreakEst","_s","password","setPassword","estimation","setEstimation","length","calculateTime","pass","characterPool","test","combinations","Math","pow","guessesPerSecond","seconds","formatTime","round","style","padding","fontFamily","maxWidth","margin","children","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","color","type","value","onChange","e","target","placeholder","width","boxSizing","border","borderRadius","fontSize","marginBottom","textAlign","textTransform","fontWeight","to","display","_c","$RefreshReg$"],"sources":["/Users/lesedimalapile/Downloads/mark-0.2/mark-0.2-front/src/pages/BreakEst.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function BreakEst() {\n  const [password, setPassword] = useState(\"\");\n  const [estimation, setEstimation] = useState(\"Enter a password to see the estimate.\");\n\n  // This effect recalculates the time whenever the password changes\n  useEffect(() => {\n    if (password.length === 0) {\n      setEstimation(\"Enter a password to see the estimate.\");\n      return;\n    }\n    calculateTime(password);\n  }, [password]);\n\n  // Function to calculate the estimated time to crack\n  const calculateTime = (pass) => {\n    const length = pass.length;\n    let characterPool = 0;\n\n    // Determine the size of the character pool based on used characters\n    if (/[a-z]/.test(pass)) characterPool += 26;\n    if (/[A-Z]/.test(pass)) characterPool += 26;\n    if (/[0-9]/.test(pass)) characterPool += 10;\n    if (/[^A-Za-z0-9]/.test(pass)) characterPool += 32; // Common symbols\n\n    // Formula: (characterPool ^ length) / guessesPerSecond\n    const combinations = Math.pow(characterPool, length);\n    const guessesPerSecond = 10e9; // 10 billion guesses per second (a powerful cracking rig)\n    const seconds = combinations / guessesPerSecond;\n\n    setEstimation(formatTime(seconds));\n  };\n\n  // Helper function to format seconds into a readable string\n  const formatTime = (seconds) => {\n    if (seconds < 1) return \"Instantly\";\n    if (seconds < 60) return `${Math.round(seconds)} seconds`;\n    if (seconds < 3600) return `${Math.round(seconds / 60)} minutes`;\n    if (seconds < 86400) return `${Math.round(seconds / 3600)} hours`;\n    if (seconds < 31536000) return `${Math.round(seconds / 86400)} days`;\n    if (seconds < 3153600000) return `${Math.round(seconds / 31536000)} years`;\n    if (seconds < 31536000000) return `${Math.round(seconds / 3153600000)} centuries`;\n    return \"Eternity\";\n  };\n\n  return (\n    <div style={{ padding: 24, fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\", maxWidth: 600, margin: \"auto\" }}>\n      <h1 style={{ marginTop: 0 }}>Break-Time Estimator</h1>\n      <p style={{ color: \"#6b7280\" }}>See how long it would theoretically take a powerful computer to crack your password.</p>\n      \n      {/* Password Input */}\n      <input\n        type=\"text\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Type a password to analyze\"\n        style={{ width: \"100%\", boxSizing: \"border-box\", padding: \"12px\", border: \"1px solid #e5e7eb\", borderRadius: 6, fontSize: 16, marginBottom: 24 }}\n      />\n\n      {/* Estimation Display */}\n      <div style={{ textAlign: \"center\", border: \"1px solid #e5e7eb\", borderRadius: 8, padding: \"32px 20px\" }}>\n        <p style={{ margin: 0, color: \"#6b7280\", fontSize: 14, textTransform: \"uppercase\" }}>Estimated Time to Crack</p>\n        <p style={{ margin: \"8px 0 0\", color: \"#111827\", fontSize: \"2.5rem\", fontWeight: 700 }}>\n          {estimation}\n        </p>\n      </div>\n\n      <Link to=\"/\" style={{ color: \"#2563eb\", display: \"inline-block\", marginTop: 24 }}>‚Üê Back to Home</Link>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}